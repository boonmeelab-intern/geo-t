{"version":3,"sources":["../../../src/utils/transition-manager.js"],"names":["noop","cropEasingFunction","easing","x0","y0","t","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","UPDATE","DEFAULT_PROPS","transitionDuration","transitionEasing","transitionInterpolator","LinearInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","onViewportChange","onStateChange","TransitionManager","props","getTime","_animationFrame","requestAnimationFrame","_onTransitionFrame","_updateViewport","time","Date","now","state","propsInTransition","nextProps","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","startProps","Object","assign","endProps","_isTransitionInProgress","interruption","currentTime","startTime","duration","_triggerTransition","_endTransition","Boolean","interpolator","arePropsEqual","_isUpdateDueToCurrentTransition","cancelAnimationFrame","initialProps","initializeProps","interactionState","inTransition","isZooming","zoom","isPanning","longitude","latitude","isRotating","bearing","pitch","start","end","animation","shouldEnd","viewport","interpolateProps","mapState","MapState","getViewportProps"],"mappings":"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","sourcesContent":["// @flow\n/* global requestAnimationFrame, cancelAnimationFrame */\nimport assert from './assert';\nimport {TransitionInterpolator, LinearInterpolator} from './transition';\nimport MapState from './map-state';\n\nimport type {MapStateProps} from './map-state';\n\nconst noop = () => {};\n\n// crops the old easing function from x0 to 1 where x0 is the interruption point\n// returns a new easing function with domain [0, 1] and range [0, 1]\nexport function cropEasingFunction(easing: number => number, x0: number): number => number {\n  const y0 = easing(x0);\n  return (t: number) => 1 / (1 - y0) * (easing(t * (1 - x0) + x0) - y0);\n}\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3,\n  UPDATE: 4\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: (t: number) => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop,\n  onViewportChange: noop,\n  onStateChange: noop\n};\n\nexport type ViewportProps = MapStateProps & {\n  onTransitionStart: Function,\n  onTransitionInterrupt: Function,\n  onTransitionEnd: Function,\n  onViewportChange: Function,\n  onStateChange: Function\n};\n\ntype TransitionState = {\n  propsInTransition: any,\n  interactionState: any,\n  startProps: MapStateProps,\n  endProps: MapStateProps,\n\n  duration: number,\n  easing: number => number,\n  interpolator: TransitionInterpolator,\n  interruption: number,\n\n  startTime: number\n};\n\nexport default class TransitionManager {\n\n  static defaultProps = DEFAULT_PROPS;\n\n  constructor(props?: ViewportProps, getTime: ?Function) {\n    if (props) {\n      this.props = props;\n    }\n    this.time = getTime || Date.now;\n  }\n\n  props: ViewportProps;\n  state: TransitionState;\n\n  time: Function;\n  _animationFrame: ?AnimationFrameID = null;\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this._animationFrame ? this.state.propsInTransition : null;\n  }\n\n  // Process the viewport change, either ignore or trigger a new transiton.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewportChange(nextProps: ViewportProps) {\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return false;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign({}, currentProps);\n      const endProps = Object.assign({}, nextProps);\n\n      if (this._isTransitionInProgress()) {\n        currentProps.onTransitionInterrupt();\n\n        if (this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END) {\n          Object.assign(startProps, this.state.endProps);\n        } else {\n          Object.assign(startProps, this.state.propsInTransition);\n        }\n\n        if (this.state.interruption === TRANSITION_EVENTS.UPDATE) {\n          const currentTime = this.time();\n          const x0 = (currentTime - this.state.startTime) / this.state.duration;\n          endProps.transitionDuration =\n          this.state.duration - (currentTime - this.state.startTime);\n          endProps.transitionEasing = cropEasingFunction(this.state.easing, x0);\n          endProps.transitionInterpolator = startProps.transitionInterpolator;\n        }\n      }\n      endProps.onTransitionStart();\n\n      this._triggerTransition(startProps, endProps);\n\n      return true;\n    }\n\n    if (this._isTransitionInProgress()) {\n      currentProps.onTransitionInterrupt();\n      this._endTransition();\n    }\n\n    return false;\n  }\n\n  // Helper methods\n\n  _isTransitionInProgress(): boolean {\n    return Boolean(this._animationFrame);\n  }\n\n  _isTransitionEnabled(props: ViewportProps): boolean {\n    return props.transitionDuration > 0 && Boolean(props.transitionInterpolator);\n  }\n\n  _isUpdateDueToCurrentTransition(props: ViewportProps): boolean {\n    if (this.state.propsInTransition) {\n      return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps: ViewportProps, nextProps: ViewportProps): boolean {\n    if (!currentProps) {\n      return true;\n    }\n    if (this._isTransitionInProgress()) {\n      // Ignore update if it is requested to be ignored\n      return this.state.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps);\n    }\n    if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n\n    return true;\n  }\n\n  _triggerTransition(startProps: ViewportProps, endProps: ViewportProps) {\n    assert(this._isTransitionEnabled(endProps), 'Transition is not enabled');\n\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n    }\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endProps\n    );\n\n    const interactionState = {\n      inTransition: true,\n      isZooming: startProps.zoom !== endProps.zoom,\n      isPanning: startProps.longitude !== endProps.longitude ||\n        startProps.latitude !== endProps.latitude,\n      isRotating: startProps.bearing !== endProps.bearing ||\n        startProps.pitch !== endProps.pitch\n    };\n\n    this.state = {\n      // Save current transition props\n      duration: endProps.transitionDuration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startTime: this.time(),\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      animation: null,\n      propsInTransition: {},\n      interactionState\n    };\n    this._onTransitionFrame();\n    this.props.onStateChange(interactionState);\n  }\n\n  _onTransitionFrame = () => {\n    // _updateViewport() may cancel the animation\n    this._animationFrame = requestAnimationFrame(this._onTransitionFrame);\n    this._updateViewport();\n  }\n\n  _endTransition() {\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = null;\n    }\n    this.props.onStateChange({\n      inTransition: false,\n      isZooming: false,\n      isPanning: false,\n      isRotating: false\n    });\n  }\n\n  _updateViewport() {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const currentTime = this.time();\n    const {startTime, duration, easing, interpolator, startProps, endProps} = this.state;\n    let shouldEnd = false;\n    let t = (currentTime - startTime) / duration;\n    if (t >= 1) {\n      t = 1;\n      shouldEnd = true;\n    }\n    t = easing(t);\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n    // Normalize viewport props\n    const mapState = new MapState(Object.assign({}, this.props, viewport));\n    this.state.propsInTransition = mapState.getViewportProps();\n\n    this.props.onViewportChange(\n      this.state.propsInTransition,\n      this.state.interactionState,\n      this.props\n    );\n\n    if (shouldEnd) {\n      this._endTransition();\n      this.props.onTransitionEnd();\n    }\n  }\n}\n"],"file":"transition-manager.js"}