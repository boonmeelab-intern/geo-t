import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { fetchFile } from '@loaders.gl/core';
import assert from './utils/assert';
import { getFullUri } from './gltf-utils/gltf-utils';
import parseGLBSync, { isGLB } from './parse-glb';
import * as EXTENSIONS from './extensions';
const DEFAULT_SYNC_OPTIONS = {
  fetchLinkedResources: false,
  decompress: false,
  DracoLoader: null,
  postProcess: true,
  createImages: false,
  log: console
};
const DEFAULT_ASYNC_OPTIONS = {
  fetchLinkedResources: true,
  fetch: fetchFile,
  decompress: false,
  DracoLoader: null,
  postProcess: true,
  createImages: false,
  log: console
};
export function isGLTF(arrayBuffer) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const dataView = new DataView(arrayBuffer);
  const byteOffset = 0;
  return isGLB(dataView, byteOffset);
}
export function parseGLTFSync(gltf, arrayBufferOrString) {
  let byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  options = Object.assign({}, DEFAULT_SYNC_OPTIONS, options);
  let data = arrayBufferOrString;

  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {
    const textDecoder = new TextDecoder();
    data = textDecoder.decode(data);
  }

  gltf.buffers = [];

  if (typeof data === 'string') {
    gltf.json = JSON.parse(data);
  } else if (data instanceof ArrayBuffer) {
    byteOffset = parseGLBSync(gltf, data, byteOffset, options);

    if (gltf.hasBinChunk) {
      gltf.buffers.push({
        arrayBuffer: data,
        byteOffset: gltf.binChunkByteOffset,
        byteLength: gltf.binChunkLength
      });
    }
  } else {
    gltf.json = data;
  }

  if (options.uri) {
    gltf.baseUri = options.uri;
  }

  if (options.fetchLinkedResources) {
    for (const buffer of gltf.json.buffers || []) {
      if (buffer.uri) {
        throw new Error('parseGLTFSync: Cannot decode uri buffers');
      }
    }
  }

  decodeExtensions(gltf, options);
  return byteOffset;
}
export function parseGLTF(_x, _x2) {
  return _parseGLTF.apply(this, arguments);
}

function _parseGLTF() {
  _parseGLTF = _asyncToGenerator(function* (gltf, arrayBufferOrString) {
    let byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    options = Object.assign({}, DEFAULT_ASYNC_OPTIONS, options);
    parseGLTFSync(gltf, arrayBufferOrString, byteOffset, _objectSpread({}, options, {
      fetchLinkedResources: false,
      postProcess: false,
      decompress: false
    }));

    if (options.fetchLinkedResources) {
      yield fetchLinkedResources(gltf, options);
    }

    return gltf;
  });
  return _parseGLTF.apply(this, arguments);
}

function fetchLinkedResources(_x3, _x4) {
  return _fetchLinkedResources.apply(this, arguments);
}

function _fetchLinkedResources() {
  _fetchLinkedResources = _asyncToGenerator(function* (gltf, options) {
    for (const buffer of gltf.json.buffers) {
      if (buffer.uri) {
        const fetch = options.fetch || window.fetch;
        assert(fetch);
        const uri = getFullUri(buffer.uri, options.uri);
        const response = yield fetch(uri);
        const arrayBuffer = yield response.arrayBuffer();
        buffer.data = arrayBuffer;
        delete buffer.uri;
      }
    }
  });
  return _fetchLinkedResources.apply(this, arguments);
}

function decodeExtensions(gltf, options) {
  for (const extensionName in EXTENSIONS) {
    const disableExtension = extensionName in options && !options[extensionName];

    if (!disableExtension) {
      const extension = EXTENSIONS[extensionName];
      extension.decode(gltf, options);
    }
  }
}
//# sourceMappingURL=parse-gltf.js.map