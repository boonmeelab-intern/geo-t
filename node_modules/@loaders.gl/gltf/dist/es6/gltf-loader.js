import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { parseGLTFSync, parseGLTF } from './lib/parse-gltf';
import GLTFParser from './lib/deprecated/gltf-parser';
const DEFAULT_OPTIONS = {
  useGLTFParser: true
};
export function parse(_x) {
  return _parse.apply(this, arguments);
}

function _parse() {
  _parse = _asyncToGenerator(function* (arrayBuffer) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    options = _objectSpread({}, DEFAULT_OPTIONS, options);

    if (options.useGLTFParser) {
      const gltfParser = new GLTFParser();
      return gltfParser.parse(arrayBuffer, options);
    }

    const {
      byteOffset = 0
    } = options;
    const gltf = {};
    yield parseGLTF(gltf, arrayBuffer, byteOffset, options);
    return gltf;
  });
  return _parse.apply(this, arguments);
}

export function parseSync(arrayBuffer) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  options = _objectSpread({}, DEFAULT_OPTIONS, options);

  if (options.useGLTFParser) {
    return new GLTFParser().parseSync(arrayBuffer, options);
  }

  const {
    byteOffset = 0
  } = options;
  const gltf = {};
  parseGLTFSync(gltf, arrayBuffer, byteOffset, options);
  return gltf;
}
export default {
  name: 'glTF',
  extension: ['gltf', 'glb'],
  text: true,
  binary: true,
  parse,
  parseSync,
  defaultOptions: DEFAULT_OPTIONS
};
//# sourceMappingURL=gltf-loader.js.map