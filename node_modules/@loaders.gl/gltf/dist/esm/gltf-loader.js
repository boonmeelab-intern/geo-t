import _regeneratorRuntime from "@babel/runtime/regenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { parseGLTFSync, parseGLTF } from './lib/parse-gltf';
import GLTFParser from './lib/deprecated/gltf-parser';
var DEFAULT_OPTIONS = {
  useGLTFParser: true
};
export function parse(_x) {
  return _parse.apply(this, arguments);
}

function _parse() {
  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer) {
    var options,
        gltfParser,
        _options2,
        _options2$byteOffset,
        byteOffset,
        gltf,
        _args = arguments;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            options = _objectSpread({}, DEFAULT_OPTIONS, options);

            if (!options.useGLTFParser) {
              _context.next = 5;
              break;
            }

            gltfParser = new GLTFParser();
            return _context.abrupt("return", gltfParser.parse(arrayBuffer, options));

          case 5:
            _options2 = options, _options2$byteOffset = _options2.byteOffset, byteOffset = _options2$byteOffset === void 0 ? 0 : _options2$byteOffset;
            gltf = {};
            _context.next = 9;
            return parseGLTF(gltf, arrayBuffer, byteOffset, options);

          case 9:
            return _context.abrupt("return", gltf);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parse.apply(this, arguments);
}

export function parseSync(arrayBuffer) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  options = _objectSpread({}, DEFAULT_OPTIONS, options);

  if (options.useGLTFParser) {
    return new GLTFParser().parseSync(arrayBuffer, options);
  }

  var _options = options,
      _options$byteOffset = _options.byteOffset,
      byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;
  var gltf = {};
  parseGLTFSync(gltf, arrayBuffer, byteOffset, options);
  return gltf;
}
export default {
  name: 'glTF',
  extension: ['gltf', 'glb'],
  text: true,
  binary: true,
  parse: parse,
  parseSync: parseSync,
  defaultOptions: DEFAULT_OPTIONS
};
//# sourceMappingURL=gltf-loader.js.map