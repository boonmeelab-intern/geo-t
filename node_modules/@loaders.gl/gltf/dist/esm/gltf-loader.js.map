{"version":3,"sources":["../../src/gltf-loader.js"],"names":["parseGLTFSync","parseGLTF","GLTFParser","DEFAULT_OPTIONS","useGLTFParser","parse","arrayBuffer","options","gltfParser","byteOffset","gltf","parseSync","name","extension","text","binary","defaultOptions"],"mappings":";;;AAEA,SAAQA,aAAR,EAAuBC,SAAvB,QAAuC,kBAAvC;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,aAAa,EAAE;AADO,CAAxB;AAIA,gBAAsBC,KAAtB;AAAA;AAAA;;;sDAAO,iBAAqBC,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAkCC,YAAAA,OAAlC,2DAA4C,EAA5C;AAELA,YAAAA,OAAO,qBAAOJ,eAAP,EAA2BI,OAA3B,CAAP;;AAFK,iBAIDA,OAAO,CAACH,aAJP;AAAA;AAAA;AAAA;;AAKGI,YAAAA,UALH,GAKgB,IAAIN,UAAJ,EALhB;AAAA,6CAMIM,UAAU,CAACH,KAAX,CAAiBC,WAAjB,EAA8BC,OAA9B,CANJ;;AAAA;AAAA,wBAUoBA,OAVpB,mCAUEE,UAVF,EAUEA,UAVF,qCAUe,CAVf;AAWCC,YAAAA,IAXD,GAWQ,EAXR;AAAA;AAAA,mBAYCT,SAAS,CAACS,IAAD,EAAOJ,WAAP,EAAoBG,UAApB,EAAgCF,OAAhC,CAZV;;AAAA;AAAA,6CAaEG,IAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBP,OAAO,SAASC,SAAT,CAAmBL,WAAnB,EAA8C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAEnDA,EAAAA,OAAO,qBAAOJ,eAAP,EAA2BI,OAA3B,CAAP;;AAGA,MAAIA,OAAO,CAACH,aAAZ,EAA2B;AACzB,WAAO,IAAIF,UAAJ,GAAiBS,SAAjB,CAA2BL,WAA3B,EAAwCC,OAAxC,CAAP;AACD;;AAPkD,iBAU1BA,OAV0B;AAAA,qCAU5CE,UAV4C;AAAA,MAU5CA,UAV4C,oCAU/B,CAV+B;AAWnD,MAAMC,IAAI,GAAG,EAAb;AACAV,EAAAA,aAAa,CAACU,IAAD,EAAOJ,WAAP,EAAoBG,UAApB,EAAgCF,OAAhC,CAAb;AACA,SAAOG,IAAP;AACD;AAED,eAAe;AACbE,EAAAA,IAAI,EAAE,MADO;AAEbC,EAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,KAAT,CAFE;AAGbC,EAAAA,IAAI,EAAE,IAHO;AAIbC,EAAAA,MAAM,EAAE,IAJK;AAKbV,EAAAA,KAAK,EAALA,KALa;AAMbM,EAAAA,SAAS,EAATA,SANa;AAObK,EAAAA,cAAc,EAAEb;AAPH,CAAf","sourcesContent":["// Binary container format for glTF\n\nimport {parseGLTFSync, parseGLTF} from './lib/parse-gltf';\nimport GLTFParser from './lib/deprecated/gltf-parser';\n\nconst DEFAULT_OPTIONS = {\n  useGLTFParser: true // GLTFParser will be removed in v2.\n};\n\nexport async function parse(arrayBuffer, options = {}) {\n  // Apps like to call the parse method directly so apply default options here\n  options = {...DEFAULT_OPTIONS, ...options};\n  // Deprecated: Return GLTFParser instance\n  if (options.useGLTFParser) {\n    const gltfParser = new GLTFParser();\n    return gltfParser.parse(arrayBuffer, options);\n  }\n\n  // Return pure javascript object\n  const {byteOffset = 0} = options;\n  const gltf = {};\n  await parseGLTF(gltf, arrayBuffer, byteOffset, options);\n  return gltf;\n}\n\nexport function parseSync(arrayBuffer, options = {}) {\n  // Apps like to call the parse method directly so apply default options here\n  options = {...DEFAULT_OPTIONS, ...options};\n\n  // Deprecated: Return GLTFParser instance\n  if (options.useGLTFParser) {\n    return new GLTFParser().parseSync(arrayBuffer, options);\n  }\n\n  // Return pure javascript object\n  const {byteOffset = 0} = options;\n  const gltf = {};\n  parseGLTFSync(gltf, arrayBuffer, byteOffset, options);\n  return gltf;\n}\n\nexport default {\n  name: 'glTF',\n  extension: ['gltf', 'glb'],\n  text: true,\n  binary: true,\n  parse,\n  parseSync, // Less features when parsing synchronously\n  defaultOptions: DEFAULT_OPTIONS\n};\n"],"file":"gltf-loader.js"}