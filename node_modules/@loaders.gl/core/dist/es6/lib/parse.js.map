{"version":3,"sources":["../../../src/lib/parse.js"],"names":["isFileReadable","autoDetectLoader","normalizeLoader","isLoaderObject","mergeLoaderAndUserOptions","getRegisteredLoaders","parseWithLoader","parseWithLoaderInBatches","parseWithLoaderSync","parse","data","loaders","options","url","Array","isArray","autoUrl","name","loader","parseSync","parseInBatches","parseInBatchesSync"],"mappings":"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","sourcesContent":["import {isFileReadable} from '../javascript-utils/is-type';\nimport {autoDetectLoader} from './loader-utils/auto-detect-loader';\nimport {normalizeLoader, isLoaderObject} from './loader-utils/normalize-loader';\nimport {mergeLoaderAndUserOptions} from './loader-utils/normalize-options';\nimport {getRegisteredLoaders} from './register-loaders';\nimport {parseWithLoader, parseWithLoaderInBatches, parseWithLoaderSync} from './parse-with-loader';\n\nexport async function parse(data, loaders, options, url) {\n  // Signature: parse(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Extract a url for auto detection\n  const autoUrl = isFileReadable(url) ? url.name : url;\n\n  loaders = loaders || getRegisteredLoaders();\n  const loader = Array.isArray(loaders) ? autoDetectLoader(autoUrl, data, loaders) : loaders;\n  if (!loader) {\n    // no loader available\n    // TODO: throw error?\n    return null;\n  }\n\n  normalizeLoader(loader);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  return await parseWithLoader(data, loader, options, autoUrl);\n}\n\nexport function parseSync(data, loaders, options, url) {\n  // Signature: parseSync(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Choose loader and normalize it\n  loaders = loaders || getRegisteredLoaders();\n  const loader = Array.isArray(loaders) ? autoDetectLoader(url, data, loaders) : loaders;\n  normalizeLoader(loader);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  return parseWithLoaderSync(data, loader, options, url);\n}\n\nexport async function parseInBatches(data, loaders, options, url) {\n  // Signature: parseInBatches(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Choose loader and normalize it\n  loaders = loaders || getRegisteredLoaders();\n  const loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders;\n  normalizeLoader(loader);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  return parseWithLoaderInBatches(data, loader, options, url);\n}\n\nexport async function parseInBatchesSync(data, loaders, options, url) {\n  // Signature: parseInBatchesSync(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Choose loader and normalize it\n  loaders = loaders || getRegisteredLoaders();\n  const loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders;\n  normalizeLoader(loader);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  return parseWithLoaderInBatches(data, loader, options, url);\n}\n"],"file":"parse.js"}