{"version":3,"sources":["../../../../src/lib/loader-utils/get-data.js"],"names":["isFetchResponse","isReadableStream","isAsyncIterable","isIterable","isIterator","isFileReadable","getStreamIterator","fetchFileReadable","ERR_DATA","getUrlFromData","data","url","getSizeFromData","headers","get","getArrayBufferOrStringFromDataSync","loader","text","ArrayBuffer","isView","arrayBuffer","buffer","binary","textDecoder","TextDecoder","decode","Error","getArrayBufferOrStringFromData","isArrayBuffer","getAsyncIteratorFromData","body","Symbol","asyncIterator","getIteratorFromData","oneChunk","iterator"],"mappings":"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","sourcesContent":["/* global TextDecoder */\nimport {\n  isFetchResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isFileReadable\n} from '../../javascript-utils/is-type';\nimport {getStreamIterator} from '../../javascript-utils/stream-utils';\nimport fetchFileReadable from '../fetch/fetch-file.browser';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\nexport function getUrlFromData(data) {\n  return isFetchResponse(data) ? data.url : null;\n}\n\nexport function getSizeFromData(data) {\n  return isFetchResponse(data) ? data.headers.get('Content-Length') : null;\n}\nexport function getArrayBufferOrStringFromDataSync(data, loader) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    const arrayBuffer = data.buffer || data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(data, loader) {\n  // Resolve any promise\n  data = await data;\n\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data, loader);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isFileReadable(data)) {\n    data = await fetchFileReadable(data);\n  }\n\n  if (isFetchResponse(data)) {\n    return loader.binary ? await data.arrayBuffer() : data.text();\n  }\n\n  // if (isIterable(data) || isAsyncIterable(data)) {\n  // }\n\n  // Assume arrayBuffer iterator - attempt to concatenate\n  // return concatenateAsyncIterator(data);\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getAsyncIteratorFromData(data, loader) {\n  if (isIterator(data)) {\n    return data;\n  }\n\n  // TODO: Our fetchFileReaderObject response does not yet support a body stream\n  if (isFetchResponse(data) && data.body) {\n    return getStreamIterator(data.body);\n  }\n\n  if (isReadableStream(data)) {\n    return getStreamIterator(data);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIteratorFromData(data, loader);\n}\n\nexport async function getIteratorFromData(data, loader) {\n  // generate an iterator that emits a single chunk\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer || data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n"],"file":"get-data.js"}